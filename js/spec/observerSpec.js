// Generated by CoffeeScript 1.7.1
describe("Rrs.Observer", function() {
  var observer;
  observer = null;
  beforeEach(function() {
    return observer = Rrs.Observer.instance();
  });
  it("implement the Singleton pattern", function() {
    var observer2;
    observer2 = Rrs.Observer.instance();
    return expect(observer).toEqual(observer2);
  });
  it("Call only callback of subscriber, that has the same namespace and signal name, but doesn't call the rest(namespace is the same for ALL)", function() {
    var callCnt, cb, dataToBeSent1, dataToBeSent2, dataToBeSent3;
    dataToBeSent1 = {
      key: 'val'
    };
    dataToBeSent2 = {
      key2: 'val2'
    };
    dataToBeSent3 = {
      key3: 'val3'
    };
    callCnt = 0;
    cb = function(data) {
      callCnt++;
      return expect(data).toEqual(dataToBeSent1);
    };
    observer.listen('SomeNamespace', 'some-signal1', cb, this);
    observer.emit('SomeNamespace', 'some-signal1', dataToBeSent1);
    observer.emit('SomeNamespace', 'some-signal2', dataToBeSent2);
    observer.emit('SomeNamespace', 'some-signal3', dataToBeSent3);
    return expect(callCnt).toEqual(1);
  });
  it("Call only callback of subscriber, that has the same namespace and signal name, but doesn't call the rest(signall is the same for ALL)", function() {
    var callCnt, cb, dataToBeSent1, dataToBeSent2, dataToBeSent3;
    dataToBeSent1 = {
      key: 'val'
    };
    dataToBeSent2 = {
      key2: 'val2'
    };
    dataToBeSent3 = {
      key3: 'val3'
    };
    callCnt = 0;
    cb = function(data) {
      callCnt++;
      return expect(data).toEqual(dataToBeSent1);
    };
    observer.listen('SomeNamespace1', 'some-signal', cb, this);
    observer.emit('SomeNamespace1', 'some-signal', dataToBeSent1);
    observer.emit('SomeNamespace2', 'some-signal', dataToBeSent2);
    observer.emit('SomeNamespace3', 'some-signal', dataToBeSent3);
    return expect(callCnt).toEqual(1);
  });
  it("call subscribers callback and pass emitted data to it when namespace is used", function() {
    var callCnt, cb, dataToBeSent;
    dataToBeSent = {
      key: 'val'
    };
    callCnt = 0;
    cb = function(data) {
      callCnt++;
      return expect(data).toEqual(dataToBeSent);
    };
    observer.listen('SomeNamespace', 'some-signal', cb, this);
    observer.emit('SomeNamespace', 'some-signal', dataToBeSent);
    return expect(callCnt).toEqual(1);
  });
  it("DOESN't call subscribers callback when namespases are different", function() {
    var callCnt, cb;
    callCnt = 0;
    cb = function(data) {
      return callCnt++;
    };
    observer.listen('SomeNamespace1', 'some-signal', cb, this);
    observer.emit('SomeNamespace2', 'some-signal');
    return expect(callCnt).toEqual(0);
  });
  it("DOESN't call subscribers callback when signal names are the same", function() {
    var callCnt, cb;
    callCnt = 0;
    cb = function(data) {
      return callCnt++;
    };
    observer.listen('SomeNamespace', 'some-signal1', cb, this);
    observer.emit('SomeNamespace', 'some-signal2');
    return expect(callCnt).toEqual(0);
  });
  it("bind observer to callers context when 'context' param is passed", function() {
    var cb, me;
    me = this;
    cb = function(data) {
      return expect(this).toEqual(me);
    };
    observer.listen('SomeNamespace', 'some-signal', cb, this);
    return observer.emit('SomeNamespace', 'some-signal');
  });
  it("throws exception when both namespace and signal are passed but context is not passed", function() {
    var cb, exception, signal;
    cb = function(data) {};
    signal = "SomeNamespace:some-signal";
    exception = new Error("Conext is not set for " + signal);
    return expect(function() {
      return observer.listen('SomeNamespace', 'some-signal', cb);
    }).toThrow(exception);
  });
  it("throws exception when signal is passed but namespace and context are not passed", function() {
    var cb, exception, signal;
    cb = function(data) {};
    signal = "some-signal";
    exception = new Error("Conext is not set for " + signal);
    return expect(function() {
      return observer.listen(null, 'some-signal', cb);
    }).toThrow(exception);
  });
  it("throws exception when both namespace and signal are passed but callback is not passed", function() {
    var exception, signal;
    signal = "SomeNamespace:some-signal";
    exception = new Error("Callback is not set for " + signal);
    return expect(function() {
      return observer.listen('SomeNamespace', 'some-signal', null, this);
    }).toThrow(exception);
  });
  return it("throws exception when signal is passed but namespace and callback are not passed", function() {
    var cb, exception, signal;
    cb = function(data) {};
    signal = "some-signal";
    exception = new Error("Callback is not set for " + signal);
    return expect(function() {
      return observer.listen(null, 'some-signal', null, this);
    }).toThrow(exception);
  });
});
