// Generated by CoffeeScript 1.7.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

describe("Rrs.mixOf", function() {
  return it("added mix in another classes to a new class", function() {
    var ConstructedClass, Mixin1, Mixin2, Mixin3, constructedClassInst;
    Mixin1 = (function() {
      function Mixin1() {}

      Mixin1.prototype.mixin1Method = function() {};

      Mixin1.prototype.mixin1Prop = 1;

      return Mixin1;

    })();
    Mixin2 = (function() {
      function Mixin2() {}

      Mixin2.prototype.mixin2Method = function() {};

      Mixin2.prototype.mixin2Prop = 2;

      return Mixin2;

    })();
    Mixin3 = (function() {
      function Mixin3() {}

      Mixin3.prototype.mixin3Method = function() {};

      Mixin3.prototype.mixin3Prop = 3;

      return Mixin3;

    })();
    ConstructedClass = (function(_super) {
      __extends(ConstructedClass, _super);

      function ConstructedClass() {
        return ConstructedClass.__super__.constructor.apply(this, arguments);
      }

      return ConstructedClass;

    })(Rrs.mixOf(Mixin1, Mixin2, Mixin3));
    constructedClassInst = new ConstructedClass;
    expect(constructedClassInst.mixin1Method).toBeDefined();
    expect(constructedClassInst.mixin2Method).toBeDefined();
    expect(constructedClassInst.mixin3Method).toBeDefined();
    expect(constructedClassInst.mixin1Prop).toEqual(1);
    expect(constructedClassInst.mixin2Prop).toEqual(2);
    return expect(constructedClassInst.mixin3Prop).toEqual(3);
  });
});
