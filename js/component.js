// Generated by CoffeeScript 1.7.1
var PageComponent;

PageComponent = (function() {
  function PageComponent() {}

  PageComponent.prototype.init = function() {
    Rrs.logger.log("PageComponent called");
    this._initHandlers();
    return this._initListeners();
  };

  PageComponent.prototype.emit = function(inSignalName, inData) {
    var sender;
    sender = Rrs.Obj.getClass(this);
    return Rrs.Observer.instance().emit(sender, inSignalName, inData);
  };

  PageComponent.prototype._initHandlers = function() {
    var elementName, eventName, handler, handlerData, handlerName, _ref, _ref1, _results;
    _ref = this.handlers;
    _results = [];
    for (handlerName in _ref) {
      handler = _ref[handlerName];
      handlerData = handlerName.split(' ');
      elementName = handlerData[0];
      eventName = handlerData[1];
      if (((_ref1 = this.elements[elementName]) != null ? _ref1.length : void 0) > 0) {
        this.elements[elementName].unbind(eventName);
        _results.push(this.elements[elementName].bind(eventName, (function(_this) {
          return function() {
            return handler.call(_this);
          };
        })(this)));
      } else {
        _results.push(Rrs.logger.error("Unable to bind " + eventName + " for " + elementName + " since " + elementName + " does not exist"));
      }
    }
    return _results;
  };

  PageComponent.prototype._initListeners = function() {
    var listenerCallback, listenerName, listenerNameData, _ref, _results;
    _ref = this.listeners;
    _results = [];
    for (listenerName in _ref) {
      listenerCallback = _ref[listenerName];
      listenerNameData = listenerName.split(":");
      if ((listenerNameData != null) && listenerNameData.length === 2) {
        _results.push(Rrs.Observer.instance().listen(listenerNameData[0], listenerNameData[1], listenerCallback, this));
      } else {
        _results.push(Rrs.logger.error("Invalid listener format of name (" + listenerName + "). Must be Namespace:signal"));
      }
    }
    return _results;
  };

  return PageComponent;

})();
